---
title: "Literate Home Assistant Configuration"
date: "2025-02-28"
description: >-
  Larger instalations of Home Assistant smart-home networks usually
  lead to a fairly complex configuration that is difficult to develop
  and maintain. This blog post describes my system of HA YAML code
  management, documentation and deployment based on Git, Emacs editor
  with its Org mode, an principles of literate programming.    
categories:
  - Org mode
  - literate programming
  - Home Assistant
image: "unicorn-ha-logo.svg"
---

## Introduction

[Home Assistant](https://www.home-assistant.io) is a leading
open-source platform for home automation. My first experiments with it
date back to 2022, and my evolution path since then might have been, I guess,
quite typical. I started small but kept adding new smart devices,
automations and all that stuff. Before long I realized that my
configuration has become complex and unwieldy. I found it rather difficult to
work with definitions scattered across the front-end UI pages and/or YAML
files, despite all the great improvements to the user interface that have
been introduced recently.

I spent some time considering my requirements and came up with the following list:
1. Source code management, i.e. , applied to all
   YAML definitions, perhaps except trivial ones.
1. Related definitions across all categories, such as automations, scripts or
   template sensors, should be kept together.
1. It should be possible to document definitions well beyond what's reasonable
   to have as object descriptions.

As it turned out, with the toolset that I've been using for decades, especially
[Git](https://git-scm.com), [Emacs](https://www.gnu.org/software/emacs) and
[Org mode](https://orgmode.org), it was possible to achieve the above requirements
pretty easily. I understand that my solution isn't for everybody but, after two years
of almost daily usage, I must say that it works almost perfectly and already saved me
a lot of time and trouble.

## Code blocks and YAML in Emacs

One of the less frequently used features of Org mode is the ability to intersperse
text with code blocks enclosed in `#+BEGIN_SRC <language>` and `#+END_SRC`, where `<language>`
identifies the programming language in which the code block is written. Even though Org
supports all common languages, YAML isn't among them – maybe because it really isn't a
programming language. It was however quite easy to implement support for YAML by modifying
the provided Emacs Lisp
[template](https://git.sr.ht/~bzg/worg/tree/master/item/org-contrib/babel/ob-template.el).
The resulting module ob-yaml.el is available on GitHub and can be loaded by Emacs in the
usual way:

## Literate programming

The term *literate programming* was coined by Donald Knuth in 1984 as a way for developing computer programs
as pieces of literature that humans can easily read and enjoy.
He then used this programming method for developing the T~E~X typesetting
system that many of us still use. The Org mode uses the [noweb](https://www.cs.tufts.edu/~nr/noweb)
implementation of literate programming. Two of its features are important for our purposes:
* Designated code blocks can be “tangled“ – extracted from the Org source and pasted sequentially
  into one or more files.
* A named code block can be referred to from other code blocks by using its name enclosed in `<<` and `>>`.
  The code from the referred block is then inserted in the referring block when the latter is tangled.