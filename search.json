[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Ladislav Lhotka",
    "section": "",
    "text": "Welcome to my blog! I am a retired ICT researcher, developer and manager. In 1990s I participated in early developments of the Czech academic Internet (CESNET project), and started the campus network of the University of South Bohemia and Biology Centre CAS in České Budějovice.\nSince 2006 I’ve been actively involved in NETCONF, NETMOD and DNSOP working groups of the Internet Engineering Task Force (IETF). I authored or co-authored 8 RFC standards.\nAn open-ended list of topics that I might possibly write about includes home automation and energy management, electromobility, photovoltaics, programming, personal productivity tools, data crunching, technical and scientific publishing, music, golf, …\nThis blog site has been built using the Quarto framework and GitHub Pages."
  },
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "Archive",
    "section": "",
    "text": "MyBox and Home Assistant\n\n\n\n\n\n\n\n\nOct 29, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/mybox-home-assistant/index.html",
    "href": "posts/mybox-home-assistant/index.html",
    "title": "MyBox and Home Assistant",
    "section": "",
    "text": "MyBox is a line of sleek and smart BEV charging stations suitable for both home and public deployment. This post describes the steps necessary for integrating their Plus model (AC) into Home Assistant so that the wallbox can be monitored and controlled from this popular smart home platform.\nI use the MQTT messaging protocol for getting data from and sending commands to the wallbox. Modbus TCP could be another option in the future but, while listed in the datasheet, it is currently reserved only for internal use. According to the vendor, it should be made available to customers “soon”.\n\nMyBox Plus\nWhy did I choose the MyBox platform in the first place? Well, although it is more expensive than some of the competing products, it offers a lot of useful functionality now, hopefully with more to come later through software upgrades. One feature that I’d certainly love to try is V2H (vehicle-to-home) or V2G (vehicle-to-grid) as per ISO 15118.\nThe low-end MyBox Home model would most likely suffice for our home BEV charging purposes. After some hesitation, I decided to go for the Plus model, mainly because of its modularity. Should any hardware component need to be replaced or upgraded, it will be much easier and cheaper to do with a modular design.\n\n\n\n\n\n\n\n\n\n\n\n(a) Installation in our garage\n\n\n\n\n\n\n\n\n\n\n\n(b) Home screen of the app\n\n\n\n\n\n\n\nFigure 1: MyBox Plus wallbox and mobile application\n\n\n\nOn the other hand, since the wallbox was going to be installed in a locked garage, we didn’t need the optional RFID card reader. For the same reason I chose the tethered variant (with a fixed Type 2 cable), as it is much more convenient to simply take the cable off the holder and plug it into the car.\nFinally, I didn’t order the AC Sensor that can be used for adjusting wallbox charging power dynamically according to the current consumption of the household. My plan has been to implement such a control mechanism in Home Assistant, if it’s necessary at all.\n\n\nPreliminaries\nIn order to use MQTT in Home Assistant, MQTT integration needs to be added, and an MQTT broker also has to be set up. Actually, the latter is one of the extra functions implemented in the MyBox software, I haven’t tried it though. A natural choice for Home Assistant users is to use the Mosquitto broker add-on. Its installation and configuration is very easy, one just has to create a special Home Assistant account & password for use with the broker.\nAnother tool that I found quite handy is MQTT Explorer. It is an open-source MQTT client that makes it very easy (apart from other functions) to inspect MQTT data hierarchy. Some examples will be given below. MQTT Explorer is available for Windows, MacOS and Linux.\n\n\nEnabling MQTT in MyBox\nThe local MQTT function isn’t turned on by default. To configure it, I first needed to obtain access to the MyBox cloud portal, where the configuration of the wallbox can be viewed and changed. I received the necessary credentials directly from the technician who did the wallbox installation.\nAfter logging into the portal and opening the device configuration, I scrolled down to the local_mqtt section, enabled it and filled in the parameters of my MQTT broker. The configured web form looks like this:\n\n\n\n\n\n\nFigure 2: MyBox portal\n\n\n\nThe two items that are masked out are the user name and password chosen for the Mosquitto broker user in Home Assistant. The local-mqtt-host parameter is the IP address of my Home Assistant server with Mosquitto broker. It is also necessary to configure the MQTT root topic. I chose charger, but anything reasonable can be used instead.\nIn my case, the Home Assistant server can be accessed only from the local network, so I don’t need encryption and certificates.\n\n\nVerifying the communication\nFrom the configuration page of the MQTT integration in Home Assistant, I was able to view and change wallbox parameters via MQTT. For example, in the box Listen to a topic I could specify the topic\ncharger/e5qb-ekgg-48wz-o07w/ac-module-1-ac-module/max-charge-current\nand after pressing the START LISTENING button, the value of maximum charge current immediately poped up as seen in Figure 3 (a).\n\n\n\n\n\n\nImportant\n\n\n\nThe leftmost level in a topic (charger) is the root topic configured in the cloud portal (see above). Immediately following is the device ID of my wallbox that can also be found in the portal.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Listening to an MQTT topic\n\n\n\n\n\n\n\n\n\n\n\n(b) Publishing an MQTT packet\n\n\n\n\n\n\n\nFigure 3: Testing MQTT in Home Assistant\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt is also possible to dump all (a few dozen) parameters at once by using a wildcard topic with the hash symbol #, for example charger/#.\n\n\nSimilarly, I was able to change a writable parameter by sending a new value with /set appended to the corresponding topic name. An example for the max-charge-current parameter is in Figure 3 (b). In the MyBox mobile app (Figure 1 (b)) we can immediately verify that indeed the maximum charge current is now 6.\n\n\nConfiguring Home Assistant sensors and scripts\nWith MQTT properly working, I used MQTT Explorer for connecting to the Mosquitto broker running on my Home Assistant server, and started browsing the MQTT tree of the wallbox. I then selected topics from the following two subtrees (both with the charger/e5qb-ekgg-48wz-o07w/ prefix) for defining Home Assistant sensors and scripts, namely\n\nac-module-1-ac-module – status and charging-related settings of the wallbox, see Figure 4 (a).\nac-module-1-ev-meter – data about power output and energy consumption, see Figure 4 (b).\n\n\n\n\n\n\n\n\n\n\n\n\n(a) ac-module-1-ac-module subtree\n\n\n\n\n\n\n\n\n\n\n\n(b) ac-module-1-ev-meter subtree\n\n\n\n\n\n\n\nFigure 4: Topics in MQTT Explorer\n\n\n\nHome Assistant sensors and binary sensors that monitor specific MQTT topics are defined in the mqtt section of Home Assistant configuration. I have them in a separate file mqtt.yaml, which is included in the main configuration file:\n\n\nconfiguration.yaml\n\nmqtt: !include mqtt.yaml\n\nSensors are configured in the sensor subsection. For instance, the sensor for maximum charge current is defined as follows:\n\n\nmqtt.yaml\n\nsensor:\n  - name: \"MyBox max charge current\"\n    icon: \"mdi:current-ac\"\n    unique_id: \"e7446234-e557-4135-9117-3b9b6db3c0df\"\n    unit_of_measurement: \"A\"\n    state_class: measurement\n    state_topic: &gt;-\n      charger/e5qb-ekgg-48wz-o07w/ac-module-1-ac-module/max-charge-current\n\nSimilarly, binary sensors appear in the binary_sensor subsection, for example\n\n\nmqtt.yaml\n\nbinary_sensor:\n  - name: \"MyBox cable locked\"\n    icon: \"mdi:ev-plug-type2\"\n    unique_id: \"f010644a-8e6f-4811-94b1-7a75fa05f7d2\"\n    state_topic: &gt;-\n      charger/e5qb-ekgg-48wz-o07w/ac-module-1-ac-module/cable-locked\n    payload_on: \"true\"\n    payload_off: \"false\"\n\nScripts can be used for implementing various actions such as changing a parameter value or pausing/resuming/stopping a charging session. This script changes the value of maximum charge current:\n\n\nscripts.yaml\n\nmybox_set_max_charge_current:\n  alias: \"Set the maximum charge current\"\n  description: &gt;-\n    Set the maximum charge current for MyBox.\n  icon: \"mdi:current-ac\"\n  fields:\n    value:\n      name: \"Max charge current value\"\n      selector:\n        number:\n          min: 6\n          max: 16\n          step: 1\n          unit_of_measurement: \"A\"\n          mode: slider\n  sequence:\n    - action: mqtt.publish\n      data:\n        topic: &gt;-\n          charger/e5qb-ekgg-48wz-o07w/ac-module-1-ac-module/max-charge-current/set\n        payload_template: \"{{ value }}\"\n\nAnd the following script pauses the charging session:\n\n\nmqtt.yaml\n\nmybox_pause_charging:\n  alias: \"Pause charging\"\n  description: &gt;-\n    Pause EV charging from MyBox.\n  mode: single\n  sequence:\n    - action: mqtt.publish\n      data:\n        topic: &gt;-\n          charger/e5qb-ekgg-48wz-o07w/ac-module-1-ac-module/pause-charging/set\n\nComplete contents of configuration files that I currently use for MyBox can be downloaded from GitHub.\n\n\nConclusions\nMyBox Plus is a nice piece of hardware with rich software functionality. I’ve been using it regularly for overnight charging at 11 kW (the wallbox supports up to 22 kW) with no issues whatsoever.\nMy only complaint is that I cannot enforce single-phase operation: if a car has has a three-phase onboard charger, then MyBox will feed it over three phases. This doesn’t look like a limitation, but it prevents me from using MyBox in the mode of using only excess energy from our photovoltaic system – its minimum charging power is 4.1 kW (3 × 6 A), which is very close to the peak PV production at optimal conditions, so there is essentially no space for power regulation. Therefore, I ended up using my older EcoVolter portable wallbox for excess-energy charging because it can be switched to single-phase operation a thus go with the charging power down to 1.4 kW (1 × 6 A). I plan to write another blog post about integrating this wallbox to Home Assistant and using it in the excess-energy mode.\nBut back to MyBox: integrating it to Home Assistant via MQTT and YAML configuration turned out to be pretty easy and perfectly sufficient for our purposes. It might make sense to write a full-fledged HA integration in Python, but I guess I am not in the right position to do it, as I don’t have some of the interesting hardware modules (RFID card reader, AC sensor) and don’t use any security-related functions. Potential developers of such an integration would also appreciate more extensive technical documentation, which is currently rather scarce."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ladislav Lhotka’s Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nMyBox and Home Assistant\n\n\n\n\n\n\nelectromobility\n\n\nHome Assistant\n\n\n\nThis post describes how to integrate MyBox wallbox to Home Assistant via MQTT.\n\n\n\n\n\nOct 29, 2024\n\n\n8 min\n\n\n\n\n\n\nNo matching items"
  }
]